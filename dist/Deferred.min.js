function Deferred(){this.state=Deferred.state.unfulfilled,this.promise=new Promise}Deferred.state={unfulfilled:"unfulfilled",fulfilled:"fulfilled",failed:"failed"},Deferred.prototype.resolve=function(){this.state=Deferred.state.fulfilled;var e=Util.arg2Ary(arguments);e.splice(0,0,Promise.event.success),this.promise.emit.apply(this.promise,e)},Deferred.prototype.reject=function(){this.state=Deferred.state.failed;var e=Util.arg2Ary(arguments);e.splice(0,0,Promise.event.error),this.promise.emit.apply(this.promise,e)},Deferred.prototype.progress=function(){var e=Util.arg2Ary(arguments);e.splice(0,0,Promise.event.progress),this.promise.emit.apply(this.promise,e)},Deferred.prototype.all=function(e){var r=e.length,t=this,i=[];return Util.each(e,function(e,s){e.then(function(e){r--,i[s]=e,0===r&&t.resolve(i)},function(e){t.reject(e)})}),this.promise};